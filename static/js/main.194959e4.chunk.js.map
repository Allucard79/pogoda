{"version":3,"sources":["getDate.js","components/Weather.js","pages/Home.js","components/DayWeather.js","pages/Details.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["returnWeekDay","index","arguments","length","undefined","weekDays","Date","getDay","withStyles","card","minWidth","maxWidth","display","margin","title","fontSize","pos","marginBottom","button","color","actions","withRouter","_ref","classes","day","history","date","format","setDate","getDate","getMonth","react_default","a","createElement","Card_default","className","CardContent_default","Typography_default","gutterBottom","temp","toFixed","src","concat","weather","icon","alt","description","CardActions_default","Button_default","variant","size","onClick","e","path","push","WeatherList","props","Fragment","list","map","value","Weather","weekday","key","Home","state","_this2","this","Axios","url","method","then","res","setState","data","catch","err","console","log","React","Component","bullet","transform","img","verticalAlign","role","aria-label","night","clouds","speed","pressure","humidity","component","Link","to","Details","current","match","params","components_DayWeather","NotFound","App","react_router_dom","react_router","exact","process","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.194959e4.chunk.js","sourcesContent":["export function returnWeekDay(index = 0) {\r\n    const weekDays = ['Niedziela','Poniedziałek','Wtorek','Środa', 'Czwartek','Piątek','Sobota'];\r\n    let today = weekDays[(new Date().getDay() + index) % weekDays.length];\r\n\treturn today;\r\n}","import React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {returnWeekDay} from '../getDate';\r\n\r\n\r\nconst styles = {\r\n    card: {\r\n      minWidth: 200,\r\n      maxWidth: '20%',\r\n      display: 'inline-block',\r\n      margin: '10px',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n    button: {\r\n      color: '#ffffff',\r\n    },\r\n    actions: {\r\n      display: 'block',\r\n    }\r\n  };\r\n\r\n  //zmiana adresu url na ścieżkę podaną jako argument funkcji np. /day/1\r\n  function SimpleCard({classes,index,day,history}) {\r\n    const changeLocation = (e,path) => {\r\n        history.push(path)\r\n    }\r\n\r\n    let date = new Date(),\r\n    format = \"\"\r\n    date.setDate(date.getDate() + index)\r\n    \r\n    if(date.getDate() < 10) {\r\n        format = \"0\"\r\n    }\r\n    format += date.getDate() + \".\"\r\n    if(date.getMonth() + 1 < 10) {\r\n        format += \"0\"\r\n    }\r\n    format += date.getMonth() + 1\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardContent>\r\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n            {returnWeekDay(index)} {format}\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Temperatura {day.temp.day.toFixed()} ℃\r\n          </Typography>\r\n          <img src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`} alt=\"\"/>\r\n          <Typography>\r\n            {day.weather[0].description}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions className={classes.actions}>\r\n          <Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.button} onClick={(e) => changeLocation(e,`/day/${index}`)}>Zobacz szczegóły dnia</Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  \r\n  export default withStyles(styles)(withRouter(SimpleCard));","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport Weather from '../components/Weather'\r\nimport {returnWeekDay} from '../getDate';\r\n\r\n\r\n//Komponent stanowy - ma za zadanie realizować zadania logiki biznesowej -> operacje na stanie, metody itp.\r\nclass Home extends React.Component {\r\n  state = {\r\n    weather: []\r\n  };\r\n\r\n  componentDidMount() {\r\n//tutaj robie zapytania http\r\n    Axios({\r\n      url: `http://api.openweathermap.org/data/2.5/forecast/daily?q=Wroclaw,pl&cnt=7&appid=70a046fe2789d2e4e3bb919260264d96&units=metric&lang=pl`,\r\n      method: \"GET\"\r\n    })\r\n      .then(res => {\r\n        this.setState({\r\n          weather: res.data.list\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n//React.Framgment umożliwia opakowanei elementów bez konieczności dodawania kolejnego diva\r\n  render() {\r\n    return (\r\n      <React.Fragment> \r\n        <h1>Prognoza pogody na 7 dni dla Wrocławia</h1>\r\n        <WeatherList list={this.state.weather} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n} \r\n//komponent bezstanowy ma zadanie głównie wyświetlać\r\nfunction WeatherList(props) {\r\n    return (\r\n    <React.Fragment>\r\n    {\r\n        props.list.map((value,index) => (\r\n            <Weather weekday={returnWeekDay(index)} key={index} day={value} index={index}/>\r\n        ))\r\n    }\r\n    </React.Fragment>\r\n)\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { returnWeekDay } from \"../getDate\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  card: {\r\n    minWidth: 275,\r\n    maxWidth: \"20%\",\r\n    margin: \"auto\"\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\"\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    display: \"inline-block\"\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    fontSize: 16\r\n  },\r\n  img: {\r\n    verticalAlign: \"middle\"\r\n  },\r\n  actions: {\r\n    display: \"block\"\r\n  }\r\n};\r\n\r\nfunction DayWeather({ classes, index, day }) {\r\n  return (\r\n    <Card className={classes.card}>\r\n        <CardContent>\r\n          <Typography className={classes.title} variant=\"h5\" gutterBottom>\r\n          {returnWeekDay(index--)} <img className={classes.img} src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`} alt=\"\"/> \r\n          </Typography>         \r\n          <Typography className={classes.pos}>\r\n            Temperatura <span role=\"img\" aria-label=\"day\">🌞</span> {day.temp.day.toFixed(1)} ℃\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Temperatura <span role=\"img\" aria-label=\"night\">🌜</span> {day.temp.night.toFixed(1)} ℃\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Zachmurzenie <span role=\"img\" aria-label=\"clouds\">⛅</span> {day.clouds} %\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Prędkość <span role=\"img\" aria-label=\"wind\">💨</span> {day.speed} m/s\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Ciśnienie <span role=\"img\" aria-label=\"pressure\">🌡️</span> {day.pressure.toFixed()} hPa\r\n          </Typography>\r\n          <Typography className={classes.pos}>\r\n            Wilgotność <span role=\"img\" aria-label=\"humidity\">💧</span> {day.humidity} %\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions className={classes.actions}>\r\n          <Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.button} component={Link} to=\"/\">\r\n            Powrót\r\n          </Button>\r\n        </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(withRouter(DayWeather));\r\n","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport DayWeather from \"../components/DayWeather\";\r\n\r\nclass Details extends React.Component {\r\n  state = {\r\n    current: undefined\r\n  };\r\n  componentDidMount() {\r\n    Axios({\r\n      url: `http://api.openweathermap.org/data/2.5/forecast/daily?q=Wroclaw,pl&cnt=7&appid=70a046fe2789d2e4e3bb919260264d96&units=metric&lang=pl`,\r\n      method: \"GET\"\r\n    })\r\n    //react router dom przekazuje do dynamicznych adresów zmienne i umożliwia korzystanie z nich (:day) przy użyciu props.match.params\r\n      .then(res => {\r\n        this.setState({\r\n          current: res.data.list[this.props.match.params.day]\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Prognoza szczegółowa</h1>\r\n        {this.state.current ? (\r\n          <DayWeather\r\n            day={this.state.current}\r\n            index={this.props.match.params.day}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Details;\r\n","import React from 'react'\r\n\r\nexport default () => <h1>404 Not found</h1>","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Details from \"./pages/Details\";\nimport NotFound from \"./pages/NotFound\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"} component={Home} />\n        <Route\n          path={process.env.PUBLIC_URL + \"/day/:day\"}\n          component={Details}\n        />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"dotenv/config\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}